package com.roc.sequence.factory;import com.roc.system.domain.SysSequenceDTO;import com.roc.system.domain.SysSequenceRange;import com.roc.system.mapper.SysSequenceMapper;import com.roc.system.service.impl.SysSequenceServiceImpl;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;@Service@Slf4jpublic class MySqlSequenceFactory {    private final Lock lock = new ReentrantLock();    private int getRetryNum = 5;    private Map<String, MySqlSequenceHolder> holderMap = new ConcurrentHashMap<>();    private int initRetryNum = 5;    @Autowired    private SysSequenceMapper sequenceMapper;    @Autowired    private SysSequenceServiceImpl sequenceService;    public long getNextVal(String seqName) {        log.info("开始获取{}序列值", seqName);        MySqlSequenceHolder holder = holderMap.get(seqName);        if (holder == null) {            log.warn("获取{}序列值出现异常，指定sequenceHolder在map中不存在，开始重新获取操作", seqName);            try {                lock.lock();                holder = holderMap.get(seqName);                if (holder != null) {                    return holder.getNextVal();                }                SysSequenceRange sequenceRange = new SysSequenceRange(-1, -1);                holder = new MySqlSequenceHolder(seqName, sequenceMapper, sequenceService, sequenceRange, initRetryNum, getRetryNum);                holder.init();                holderMap.put(seqName, holder);            } finally {                lock.unlock();            }        }        long finalLongNum = holder.getNextVal();        log.info("获取{}序列值完成，获取的值为{}", seqName, finalLongNum);        return finalLongNum;    }    private void init() {        log.info("开始初始化所有sequence序列");        initAll();        log.info("初始化sequence序列完成");    }    private void initAll() {        try {            lock.lock();            List<SysSequenceDTO> sequenceDTOList = sequenceMapper.getAllSequence();            if (sequenceDTOList == null || sequenceDTOList.size() == 0) {                throw new SequenceException("The sequenceDTOList is null!");            }            for (SysSequenceDTO SequenceDTO : sequenceDTOList) {                SysSequenceRange sequenceRange = new SysSequenceRange(-1, -1);                MySqlSequenceHolder holder = new MySqlSequenceHolder(SequenceDTO.getSeqName(), sequenceMapper, sequenceService, sequenceRange, initRetryNum, getRetryNum);                holder.init();                holderMap.put(SequenceDTO.getSeqName(), holder);            }        } finally {            lock.unlock();        }    }}