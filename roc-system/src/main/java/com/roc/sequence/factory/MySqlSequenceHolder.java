package com.roc.sequence.factory;import com.roc.system.domain.SysSequenceRange;import com.roc.system.mapper.SysSequenceMapper;import com.roc.system.service.impl.SysSequenceServiceImpl;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;@Slf4jpublic class MySqlSequenceHolder {    private final Lock lock = new ReentrantLock();    private String seqName;    private SysSequenceMapper sequenceMapper;    private SysSequenceServiceImpl sequenceService;    private SysSequenceRange sequenceRange;    private volatile boolean isInitialize = false;    private int initRetryNum;    private int getRetryNum;    public MySqlSequenceHolder(String seqName, SysSequenceMapper SequenceMapper, SysSequenceServiceImpl sequenceService, SysSequenceRange sequenceRange, int initRetryNum, int getRetryNum) {        this.seqName = seqName;        this.sequenceMapper = SequenceMapper;        this.sequenceService = sequenceService;        this.sequenceRange = sequenceRange;        this.initRetryNum = initRetryNum;        this.getRetryNum = getRetryNum;    }    public void init() {        log.info("开始初始化{}序列", seqName);        if (isInitialize == true) {            log.error("初始化{}序列失败，序列已经初始化", seqName);            throw new SequenceException("[" + seqName + "] the MySqlSequenceHolder has inited");        }        if (sequenceMapper == null) {            log.error("初始化{}序列失败，SequenceRepository对象为空", seqName);            throw new SequenceException("[" + seqName + "] the SysSequenceMapper has inited");        }        if (sequenceService == null) {            log.error("初始化{}序列失败，sequenceService", seqName);            throw new SequenceException("[" + seqName + "] the sequenceService has inited");        }        if (StringUtils.isBlank(seqName)) {            log.error("初始化序列失败，seqName没有置入");            throw new SequenceException("[" + seqName + "] the seqName has inited");        }        initSequenceRecord();        isInitialize = true;        log.info("初始化{}序列完成", seqName);    }    public long getNextVal() {        if (isInitialize == false) {            log.error("获取下一个序列值失败，此序列还未初始化");            throw new SequenceException("[" + seqName + "] the MySqlSequenceHolder not inited");        }        if (sequenceRange == null) {            log.error("获取下一个序列值失败，此序列区间对象还未初始化");            throw new SequenceException("[" + seqName + "] the sequenceRange is null");        }        long curValue = sequenceRange.getAndIncrement();        if (curValue == -1) {            try {                lock.lock();                curValue = sequenceRange.getAndIncrement();                if (curValue != -1) {                    return curValue;                }                sequenceRange = retryRange();                curValue = sequenceRange.getAndIncrement();            } finally {                lock.unlock();            }        }        return curValue;    }    public void initSequenceRecord() {        for (int i = 0; i < initRetryNum; i++) {            SysSequenceRange sequenceRangeTmp = sequenceService.getNewSequenceRange(seqName);            if (sequenceRangeTmp == null) {                continue;            } else {                sequenceRange = sequenceRangeTmp;                return;            }        }    }    private SysSequenceRange retryRange() {        for (int i = 0; i < getRetryNum; i++) {            SysSequenceRange sequenceRangeTmp = sequenceService.getNewSequenceRange(seqName);            if (sequenceRangeTmp == null) {                log.error("初始化{}序列异常，无法获取指定的数据", seqName);                continue;            } else {                return sequenceRangeTmp;            }        }        throw new SequenceException("[" + seqName + "] CardSequence update error");    }}